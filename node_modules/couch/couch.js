var request = require('request')
  , qs = require('querystring')
  ;

function Couch (url) {
  if (url[url.length - 1] !== '/') url += '/'
  this.url = url
  this.designs = {}
}

Couch.prototype.get = function (id, cb) {
  request({url:this.url+id, json:true}, function (err, resp, doc) {
    if (err) return cb(err)
    if (resp.statusCode !== 200) {
      var e = doc ? doc : new Error('CouchDB error.') // make this smarter later
      e.statusCode = resp.statusCode
      return cb(e)
    }
    cb(null, doc)
  })
}

Couch.prototype.post = function (doc, cb) {
  if (typeof doc === 'string') doc = {_id:string}
  if (!doc.created) doc.created = new Date()
  request.post({url:this.url, json:doc}, function (e, resp, info) {
    if (e) return cb(e)
    info.statusCode = resp.statusCode
    if (resp.statusCode !== 201) return cb(info)
    if (!info.rev) return cb(info)
    cb(null, info)
  })
}

Couch.prototype.design = function (name) {
  if (!this.designs[name]) this.designs[name] = new Design(this, name)
  return this.designs[name]
}

function Design (db, name) {
  this.db = db
  this.name = name
  this.views = {}
}

Design.prototype.view = function (name) {
  if (!this.views[name]) this.views[name] = new View(this, name)
  return this.views[name]
}

function View (design, name) {
  this.design = design
  this.name = name
}

View.prototype.query = function (opts, cb) {
  if (opts.key) opts.key = JSON.stringify(opts.key)
  if (opts.startkey) opts.startkey = JSON.stringify(opts.startkey)
  if (opts.endkey) opts.endkey = JSON.stringify(opts.endkey)
  var url = [ this.design.db.url.slice(0, this.design.db.url.length - 1)
            , '_design', this.design.name, '_view', this.name
            ].join('/') + 
            '?' + qs.stringify(opts)
            
  request({url:url, json:true}, function (e, resp, body) {
    if (e) return cb(e)
    if (resp.statusCode !== 200) {
      var e = body ? body : new Error('CouchDB error.') // make this smarter later
      e.statusCode = resp.statusCode
      return cb(e)
    }
    cb(null, body)
  })
}

View.prototype.latest = function (startkey, args, cb) {
  if (Array.isArray(startkey)) startkey.push({})
  else startkey = [startkey, {}]
  var endkey = []
  for (var i=0;i<startkey.length-1;i++) {
    endkey.push(startkey[i])
  }
  if (!cb) {
    cb = args
    args = {}
  }
  args.startkey = startkey
  args.limit = 1
  args.endkey = endkey
  args.descending = true
  this.query(args, cb)
}

module.exports = function (url) {
  return new Couch(url)
}
